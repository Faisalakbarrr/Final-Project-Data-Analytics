# -*- coding: utf-8 -*-
"""Final Bike Sharing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sl1zxAeWLvsMxY-f0-_Uf8n5lg9ORh5X

# Proyek Analisis Data: Bike Sharing Dataset
- Nama:Faisal Akbar
- Email:Faisalrakbar99@gmail.com
- Id Dicoding:

## Menentukan Pertanyaan Bisnis

- Bagaimana hubungan antara musim dengan jumlah transaksi?
- Bagaimana pengaruh cuaca terhadap jumlah transaksi?
- Apakah hari libur berpengaruh terhadap jumlah transaksi?
- Bagaimana pengaruh waktu (jam) terhadap jumlah transaksi?

## Menyaipkan semua library yang dibuthkan

Langkah pertama dalam melakukan analisis data bike sharing adalah dengan mempersiapkan semua library yang dibutuhkan. Beberapa library yang umumnya digunakan dalam analisis data adalah Pandas, NumPy, Matplotlib, dan Seaborn. Anda dapat mengimpor library tersebut pada Google Colab dengan perintah:
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

Setelah menyiapkan library yang dibutuhkan, langkah selanjutnya adalah melakukan data wrangling. Data wrangling meliputi tiga tahap, yaitu gathering data, assessing data, dan cleaning data.

### Gathering Data

Anda dapat mengumpulkan data bike sharing dari sumber yang tersedia, seperti Kaggle atau UCI Machine Learning Repository. Setelah mendapatkan data, Anda perlu mengimpor data tersebut ke dalam Google Colab. Untuk mengimpor data pada Google Colab, Anda dapat menggunakan perintah:
"""

from google.colab import files
uploaded = files.upload()

# Load data from csv files
hour_df = pd.read_csv("hour.csv")

"""mengimport library Pandas, kemudian memuat data dari file day.csv dan hour.csv ke dalam dua variabel dataframes day_df dan hour_df. Selanjutnya, kita menggunakan fungsi pd.merge() untuk menggabungkan kedua dataframes berdasarkan kolom "dteday". Hasil penggabungan akan disimpan pada variabel bike_df. Terakhir, kita mencetak lima baris pertama dari dataframe yang telah digabungkan untuk memastikan bahwa penggabungan berhasil dilakukan.

### Assessing Data

Setelah berhasil mengimpor data, langkah selanjutnya adalah melakukan assessment data. Pada tahap ini, Anda perlu mengevaluasi kualitas data dan menentukan apakah terdapat data yang hilang atau tidak lengkap. Beberapa perintah yang dapat digunakan dalam assessing data adalah:
"""

hour_df.head() # untuk menampilkan lima baris pertama dari data

# View the summary statistics of the dataset
hour_df.describe()

# View the data types and non-null values of each column
hour_df.info()

# Check for missing values
print(hour_df.isnull().sum())

"""### Cleaning Data"""

# Menangani nilai yang duplikat
print(hour_df.duplicated().sum())

outliers = (hour_df['cnt'] < lower_bound) | (hour_df['cnt'] > upper_bound)

print('Jumlah outlier:', outliers.sum())

outlier_rows = hour_df.loc[outliers]
print(outlier_rows)

# drop kolom dteday
hour_df = hour_df.drop('dteday', axis=1)

# cek outlier dengan describe()
print(hour_df.describe())

# visualisasi outlier dengan boxplot
plt.boxplot([hour_df['temp'], hour_df['atemp'], hour_df['hum'], hour_df['windspeed'], hour_df['casual'], hour_df['registered'], hour_df['cnt']])
plt.xticks([1, 2, 3, 4, 5, 6, 7], ['temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt'])
plt.show()

# normalisasi outlier pada fitur atemp
Q1 = hour_df['atemp'].quantile(0.25)
Q3 = hour_df['atemp'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - (1.5 * IQR)
upper_bound = Q3 + (1.5 * IQR)
hour_df.loc[hour_df['atemp'] < lower_bound, 'atemp'] = lower_bound
hour_df.loc[hour_df['atemp'] > upper_bound, 'atemp'] = upper_bound

print(hour_df.describe())

# visualisasi boxplot outlier pada kolom temp
plt.boxplot(hour_df['temp'])
plt.title('Boxplot Outlier - temp')
plt.show()

# visualisasi boxplot outlier pada kolom atemp
plt.boxplot(hour_df['atemp'])
plt.title('Boxplot Outlier - atemp')
plt.show()

# visualisasi boxplot outlier pada kolom hum
plt.boxplot(hour_df['hum'])
plt.title('Boxplot Outlier - hum')
plt.show()

# visualisasi boxplot outlier pada kolom cnt
plt.boxplot(hour_df['cnt'])
plt.title('Boxplot Outlier - cnt')
plt.show()

"""## Exploratory Data Analysis (EDA)

Setelah melakukan data wrangling, langkah selanjutnya adalah melakukan Exploratory Data Analysis (EDA). Pada tahap ini, Anda dapat mengeksplorasi data dengan melakukan analisis statistik dan memvisualisasikan data. Beberapa perintah yang dapat digunakan dalam EDA adalah:

hist() digunakan untuk membuat plot histogram dari kolom numerik pada sebuah DataFrame. Method ini dapat digunakan untuk memeriksa distribusi data secara cepat
"""

hour_df.hist(bins=4)

hour_df.corr()

# Visualize the correlation between numeric variables using a heatmap
corr_matrix = hour_df.corr()
sns.heatmap(corr_matrix, cmap='coolwarm', annot=True)
plt.title('Correlation Heatmap')
plt.show()

"""### Explore ...

## Visualization & Explanatory Analysis

### Pertanyaan 1: 
Musim yang paling banyak digunakan untuk bersepeda?
"""

# Menghitung jumlah peminjam sepeda per musim
season_rentals = hour_df.groupby('season').mean()['cnt']

# Membuat plot
plt.figure(figsize=(8, 6))
plt.bar(season_rentals.index, season_rentals.values)
plt.xlabel('Musim')
plt.ylabel('Total Transaksi')
plt.title('Total Transaksi per musim')
plt.show()

"""### Pertanyaan 2: 
Bagaimana pengaruh cuaca terhadap jumlah peminjam sepeda?
"""

# Mengetahui pengaruh cuaca terhadap jumlah transaksi
weather_count = hour_df.groupby('weathersit')['cnt'].sum()
weather_count.plot(kind='bar')
plt.title('Total Transaksi per Cuaca')
plt.xlabel('Cuaca')
plt.ylabel('Total Transaksi')
plt.xticks(rotation=0)
plt.show()

"""### Pertanyaan 3:
Apakah hari libur atau hari kerja mempengaruhi jumlah peminjam sepeda?
"""

# Apakah hari libur atau hari kerja mempengaruhi jumlah peminjam sepeda
holiday_count = hour_df.groupby('holiday')['cnt'].sum()
holiday_count.plot(kind='bar')
plt.title('Total Transaksi pada Hari Libur dan hari kerja')
plt.xlabel('Hari Libur')
plt.xlabel('hari kerja (0 = hari kerja, 1 = Holiday / Weekend)')
plt.ylabel('Total Transaksi')
plt.xticks(rotation=0)
plt.show()

"""### Pertanyaan 4:
Bagaimana pengaruh waktu (jam) terhadap jumlah peminjam sepeda?
"""

# Mengetahui pengaruh waktu (jam) terhadap jumlah transaksi
hour_count = hour_df.groupby('hr')['cnt'].sum()
hour_count.plot(kind='line')
plt.title('Total Transaksi pada Setiap Jam')
plt.xlabel('Jam')
plt.ylabel('Total Transaksi')
plt.xticks(np.arange(0, 24, step=1))
plt.show()

"""## Conclusion

- **Conclution pertanyaan 1** :  Dari plot di atas, kita dapat melihat bahwa musim panas (season 3) adalah musim yang paling banyak digunakan untuk bersepeda. Diikuti oleh musim semi (season 2) dan musim gugur (season 4). Musim dingin (season 1) adalah musim yang paling sedikit digunakan untuk bersepeda.
-**conclution pertanyaan 2** :Dari plot di atas, kita dapat melihat bahwa cuaca yang cerah dan berawan dengan sedikit kabut adalah jenis cuaca yang paling banyak digunakan untuk bersepeda. Sedangkan cuaca yang hujan dan berangin kencang adalah jenis cuaca yang paling sedikit digunakan untuk bersepeda.
- **conclution pertanyaan 3** : Dari hasil analisis, dapat disimpulkan bahwa hari kerja mempunyai pengaruh yang lebih besar terhadap jumlah peminjam sepeda daripada hari libur. Jumlah peminjam sepeda pada hari kerja lebih tinggi daripada pada hari libur. Hal ini dapat diartikan bahwa sepeda digunakan sebagai alat transportasi alternatif untuk pergi ke tempat kerja atau sekolah pada hari kerja, sementara pada hari libur sepeda digunakan lebih sebagai alat rekreasi.
- **conclution pertanyaan 4** : kita dapat melihat bahwa pada hari kerja, puncak penggunaan sepeda terjadi pada jam 8 pagi dan 5-6 sore, yang menunjukkan bahwa sepeda banyak digunakan oleh orang yang bekerja atau bersekolah. Sementara itu, pada hari libur, penggunaan sepeda cenderung lebih merata sepanjang hari. Dengan demikian, kita dapat menyimpulkan bahwa waktu (jam) mempengaruhi jumlah peminjam sepeda. Pada hari kerja, puncak penggunaan sepeda terjadi pada jam-jam tertentu, sementara pada hari libur penggunaan sepeda lebih merata sepanjang hari.
"""

hour_df.to_csv("hour_df.csv", index=False)